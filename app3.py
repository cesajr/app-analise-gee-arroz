# Importando as bibliotecas necess√°rias para manipula√ß√£o de dados, visualiza√ß√£o e cria√ß√£o da interface web
import pandas as pd  # Manipula√ß√£o de dados em tabelas (DataFrames)
import numpy as np  # Opera√ß√µes num√©ricas e matem√°ticas
import matplotlib.pyplot as plt  # Gera√ß√£o de gr√°ficos b√°sicos
import seaborn as sns  # Gr√°ficos estat√≠sticos com estilo mais refinado
import streamlit as st  # Cria√ß√£o da interface interativa no navegador

# Fun√ß√£o para carregar o arquivo de dados e realizar a limpeza dos nomes de coluna
def carregar_dados(uploaded_file):
    # Carrega o arquivo Excel enviado pelo usu√°rio, utilizando a aba 'br_seeg_emissoes_brasil'
    df = pd.read_excel(uploaded_file, sheet_name='br_seeg_emissoes_brasil')
    # Remove espa√ßos extras dos nomes das colunas, evitando erros futuros
    df.columns = df.columns.str.strip()
    return df

# Fun√ß√£o para calcular a tabela de frequ√™ncia da vari√°vel CH4
def calcular_frequencia(df):
    # Conta o n√∫mero de observa√ß√µes (n√£o nulos) da vari√°vel CH4
    n = df['CH4'].count()
    
    # Aplica a Regra de Sturges para determinar o n√∫mero de intervalos de classe
    k = int(1 + 3.322 * np.log10(n))
    
    # Cria os limites dos intervalos de classe uniformemente espa√ßados
    intervalos = np.linspace(df['CH4'].min(), df['CH4'].max(), k + 1)
    
    # Classifica os dados de CH4 dentro dos intervalos de classe
    tabela_frequencia = pd.cut(df['CH4'], bins=intervalos, right=False, include_lowest=True)
    
    # Calcula a frequ√™ncia absoluta (quantidade de observa√ß√µes por intervalo)
    frequencia_absoluta = tabela_frequencia.value_counts().sort_index()
    
    # Calcula a frequ√™ncia relativa (propor√ß√£o de cada intervalo em rela√ß√£o ao total)
    frequencia_relativa = frequencia_absoluta / n
    
    # Calcula a frequ√™ncia acumulada (soma progressiva das frequ√™ncias absolutas)
    frequencia_acumulada = frequencia_absoluta.cumsum()
    
    # Cria um DataFrame com todas as informa√ß√µes de frequ√™ncia
    tabela_frequencia_df = pd.DataFrame({
        'Intervalo de Classe': frequencia_absoluta.index,
        'Frequ√™ncia Absoluta': frequencia_absoluta.values,
        'Frequ√™ncia Relativa': frequencia_relativa.values,
        'Frequ√™ncia Acumulada': frequencia_acumulada.values
    })
    
    return tabela_frequencia_df

# Fun√ß√£o para calcular as medidas descritivas da vari√°vel CH4
def calcular_medidas(df):
    # Cria um dicion√°rio para armazenar v√°rias medidas estat√≠sticas b√°sicas da coluna 'CH4'
    medidas = {
        'N√∫mero de Casos': df['CH4'].count(),  # Conta o n√∫mero total de valores n√£o nulos na vari√°vel CH4
        'M√©dia': df['CH4'].mean(),             # Calcula a m√©dia aritm√©tica dos valores da vari√°vel CH4
        'Mediana': df['CH4'].median(),         # Calcula a mediana (valor central) dos dados da vari√°vel CH4
        'Desvio Padr√£o': df['CH4'].std(),      # Calcula o desvio padr√£o, indicando a dispers√£o dos dados
        'Valor M√°ximo': df['CH4'].max(),       # Encontra o maior valor registrado na vari√°vel CH4
        'Valor M√≠nimo': df['CH4'].min()        # Encontra o menor valor registrado na vari√°vel CH4
    }
    
    # Converte o dicion√°rio de medidas em um DataFrame (tabela) para facilitar a visualiza√ß√£o no Streamlit
    medidas_df = pd.DataFrame(list(medidas.items()), columns=['Medida', 'Valor'])
    
    # Retorna o DataFrame contendo todas as medidas descritivas calculadas
    return medidas_df


# Fun√ß√£o para criar o gr√°fico da distribui√ß√£o das frequ√™ncias absolutas
def criar_grafico(tabela_frequencia_df):
    # Define o tema visual do gr√°fico (fundo branco com linhas de grade)
    sns.set_theme(style="whitegrid")
    
    # Define o tamanho da figura
    plt.figure(figsize=(12, 6))
    
    # Cria o gr√°fico de barras usando Seaborn
    sns.barplot(
        x=tabela_frequencia_df['Intervalo de Classe'].astype(str),  # Converte intervalos para string para aparecerem no eixo X
        y=tabela_frequencia_df['Frequ√™ncia Absoluta'],  # Frequ√™ncia absoluta no eixo Y
        palette='Blues',  # Define uma paleta de cores em tons de azul
        edgecolor='black'  # Adiciona bordas pretas nas barras para melhor visualiza√ß√£o
    )
    
    # Adiciona t√≠tulo e r√≥tulos aos eixos
    plt.title('Distribui√ß√£o das Frequ√™ncias Absolutas', fontsize=16)
    plt.xlabel('Intervalos de Classe (CH4)', fontsize=12)
    plt.ylabel('Frequ√™ncia Absoluta', fontsize=12)
    
    # Rotaciona os r√≥tulos do eixo X para melhor leitura
    plt.xticks(rotation=45, ha='right')
    
    # Ajusta automaticamente o layout para n√£o cortar os r√≥tulos
    plt.tight_layout()
    
    # Exibe o gr√°fico no aplicativo Streamlit
    st.pyplot(plt)

# Fun√ß√£o principal que organiza a execu√ß√£o da aplica√ß√£o no Streamlit
def main():
    # Define o t√≠tulo da p√°gina
    st.title('üìä An√°lise Estat√≠stica da Emiss√£o de Gases na Produ√ß√£o de Arroz')
    
    # Exibe uma breve descri√ß√£o da aplica√ß√£o
    st.markdown("""
    Este aplicativo realiza uma an√°lise estat√≠stica das emiss√µes de metano (CH4) na produ√ß√£o de arroz.
    Fa√ßa o upload de uma planilha `.xlsx` com os dados para iniciar a an√°lise.
    """)

    # Cria o componente de upload de arquivo no Streamlit
    uploaded_file = st.file_uploader("üìÇ Escolha uma planilha .xlsx", type="xlsx")
    
    # Verifica se o arquivo foi carregado
    if uploaded_file is not None:
        # Carrega os dados do arquivo
        df = carregar_dados(uploaded_file)
        
        # Exibe as primeiras linhas dos dados carregados
        st.subheader('üìÑ Dados Carregados')
        st.dataframe(df.head())
        
        # Calcula a tabela de frequ√™ncia
        tabela_frequencia_df = calcular_frequencia(df)
        
        # Exibe a tabela de frequ√™ncia
        st.subheader('üìà Tabela de Frequ√™ncia')
        st.dataframe(tabela_frequencia_df)
        
        # Gera e exibe o gr√°fico de barras
        st.subheader('üìä Gr√°fico da Distribui√ß√£o das Frequ√™ncias Absolutas')
        criar_grafico(tabela_frequencia_df)
        
        # Calcula as medidas descritivas
        medidas_df = calcular_medidas(df)
        
        # Exibe as medidas descritivas
        st.subheader('üìö Medidas Descritivas')
        st.dataframe(medidas_df)

# Verifica se o script est√° sendo executado diretamente e chama a fun√ß√£o principal
if __name__ == "__main__":
    main()

